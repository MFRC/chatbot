deployment { 
  deploymentType docker-compose
  appsFolders [chatbotgateway, bookingservice, chatbotservice, repairservice, customerservice]
  dockerRepositoryName "MFRC"
}

application {
  config {
    baseName chatbotgateway,
    packageName com.saathratri,
    applicationType gateway,
    authenticationType oauth2,
    databaseType sql,
    devDatabaseType postgresql,
    prodDatabaseType postgresql,
    serverPort 8080,
    serviceDiscoveryType eureka,
    testFrameworks [protractor],
    microfrontends [bookingservice, chatbotservice, repairservice, customerservice],
    clientFramework angularX
  }
}

application {
  config {
    baseName bookingservice,
    packageName com.saathratri.bookingservice,
    applicationType microservice,
    authenticationType oauth2,
    databaseType sql,
    devDatabaseType postgresql,
    prodDatabaseType postgresql,
    serverPort 8081,
    serviceDiscoveryType eureka,
    clientFramework angularX
  }
  entities HotelInfo, Reservation, LoyaltyProgram, Address, CustomerInfo
  paginate * with pagination
}

application {
  config {
    baseName chatbotservice,
    packageName com.saathratri.chatbotservice,
    applicationType microservice,
    authenticationType oauth2,
    devDatabaseType postgresql,
    prodDatabaseType postgresql,
    serverPort 8082,
    serviceDiscoveryType eureka,
    clientFramework angularX
  }

  entities ChatbotServiceUser, Message, ChatSession
  paginate * with pagination
  filter *
}

application {
  config {
    baseName repairservice,
    packageName com.saathratri.repairservice,
    applicationType microservice,
    authenticationType oauth2,
    devDatabaseType postgresql,
    prodDatabaseType postgresql,
    serverPort 8083,
    serviceDiscoveryType eureka,
    clientFramework angularX
  }

  entities Booking, Payment, Customer, RepairRequest
  paginate * with pagination
  filter *
}

application {
  config {
    baseName customerservice,
    packageName com.saathratri.customerservice,
    applicationType microservice,
    authenticationType oauth2,
    devDatabaseType postgresql,
    prodDatabaseType postgresql,
    serverPort 8084,
    serviceDiscoveryType eureka,
    clientFramework angularX
  }

  entities CustomerService, Faq, CustomerServiceEntity, CustomerServiceUser, Conversation, End, Report
  paginate * with pagination
  filter *
}

/* *********************************************************
 * Booking Service
 ********************************************************** */

entity  HotelInfo{
  hotelName String
}
    
entity Reservation{
  accountNumber String
  status String
  ratePlan String
  arrivalDate LocalDate
  departureDate LocalDate
  checkInDateTime ZonedDateTime
  checkOutDateTime ZonedDateTime
  roomType String
  roomNumber String
  adults Integer
  children Integer
  crib Boolean
  rollaway Boolean
  firstName String
  lastName String
  phone String
  email String
}
    
entity LoyaltyProgram{
  loyaltyProgramName String
  loyaltyProgramMember Boolean
  loyaltyProgramNumber String
  loyaltyProgramTier String
}

entity Address{
  addressStreet1 String
  addressStreet2 String
  addressCity String
  addressStateOrProvince String
  addressCountry String
  addressZipOrPostalCode String
  addressIsHomeOrBusiness String
}

entity CustomerInfo{
  firstName String
  lastName String
}

/* ******************************************************** */

/* *********************************************************
 * Chatbot Service
 ********************************************************** */

//A User has a name and email. The email field requires a valid email pattern.
entity ChatbotServiceUser {
  name String required
  email String required
}
//A Message has content, timestamp, and sendertype(Bot or user)
//related to chatbot user and a chatsession
entity ChatbotUser {
  name String required
  email String
  phoneNumber String
}

entity Message {
  content String required
  timestamp ZonedDateTime required
  senderType SenderType required
}

//chatsession is related to message and user
entity ChatSession {
  startTime ZonedDateTime required
  endTime ZonedDateTime
}

//either USER or BOT
enum SenderType {
    CHATBOTUSER
    BOT
}

/* ******************************************************** */

/* *********************************************************
 * Repair Service
 ********************************************************** */
entity Booking {
  roomId String
  checkInDate LocalDate
  checkOutDate LocalDate
  totalPrice Double
}

entity Payment {
  amount Double
  paymentDate LocalDate
}

entity Customer {
  firstName String
  lastName String
  email String
  phoneNumber String
}

entity RepairRequest {
  roomNumber String
  description String
  status RepairStatus
  dateCreated LocalDate
  dateUpdated LocalDate
}

enum RepairStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

/* ******************************************************** */

/* *********************************************************
 * Customer Service
 ********************************************************** */

entity CustomerService {
  startDate LocalDate
  endDate LocalDate
  reportNumber Integer
}

entity Faq {
  answers String
  question String
  keyWords String
}

entity CustomerServiceEntity {
  reservationNumber String
  roomNumber Integer
  services String
  prices Long
  amenities String
}

entity CustomerServiceUser {
  firstName String
  lastName String
  email String
  phoneNumber String
  reservationNumber String
  roomNumber String
}

entity Conversation {
  question String
  answers String
  reservationNumber String
  phoneNumber String
  startTime ZonedDateTime
  endTime ZonedDateTime
  keyWords String
}

entity End {
  closeMessage String
  moreHelp String
}

entity Report {
  time ZonedDateTime
  reportNumber Long
  moreHelp String
  satisfaction Integer
}

/* ******************************************************** */

relationship ManyToOne {
  /* *********************************************************
   * Booking Service
   ********************************************************** */
  Reservation{hotel} to HotelInfo{reservation}
  HotelInfo{address} to Address{hotel}
  /* ******************************************************** */
  
  /* *********************************************************
   * Chatbot Service
   ********************************************************** */
  Message{chatbotUser} to ChatbotUser,
  Message{chatSession} to ChatSession
  ChatSession{chatbotUser} to ChatbotUser{chatSession}
  /* ******************************************************** */

  /* *********************************************************
   * Repair Service
   ********************************************************** */
  Booking{customer} to Customer{booking}
  Payment{customer} to Customer{payment}
  RepairRequest{customer} to Customer{repairRequest}
  /* ******************************************************** */
}

relationship OneToOne{

  /* *********************************************************
   * Booking Service
   ********************************************************** */
  HotelInfo{loyaltyProgram} to LoyaltyProgram{hotel}
  CustomerInfo{address} to Address{customer}
  /* ******************************************************** */

  /* *********************************************************
   * Repair Service
   ********************************************************** */
  Booking{payment} to Payment{booking}
  /* ******************************************************** */
  
  /* *********************************************************
   * Customer Service
   ********************************************************** */
  CustomerService{faq} to Faq{customerService}
  CustomerService{customerServiceEntity} to CustomerServiceEntity{customerService}
  CustomerService{customerServiceUser} to CustomerServiceUser{customerService}
  Faq{Conversation} to Conversation{faq}
  CustomerServiceEntity{Conversation} to Conversation{customerServiceEntity}
  CustomerServiceUser{Conversation} to Conversation{customerServiceUser}
  Conversation{end} to End{conversation}
  End{report} to Report{end}
  /* ******************************************************** */
}

// Use DTO
dto all with mapstruct

// Set service options to all
service all with serviceImpl

